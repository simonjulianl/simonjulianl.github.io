[{"content":"Functional Expressionism This questions are available as a quest for CS1101S module at NUS. While I do not create or modify any of the questions, here are just some of my thoughts on the shortcut how to solve the questions!\n but this doesn\u0026rsquo;t offer full explanation how the functions work or how the substitution model can be utilized here\n Anyway, here are some tips when you are solving these questions :\n Be vigilant, there are tons of hints being thrown at you and actually you can use them Try to understand the big idea, sometimes trying to subbing in the function one by one especially for the complex functions just leads you to one hell of a mess You can brute force, it\u0026rsquo;s fine and maybe you can try to work backward to understand why your brute force solutions work / doesn\u0026rsquo;t work  So, here are my insights on these questions!\n1. Increment Repeater You are given these functions and you are required to implement the increment_repeater,\nconst twice = (f) =\u0026gt; (x) =\u0026gt; f(f(x)); const thrice = increment_repeater(twice); const fourtimes = increment_repeater(thrice); const warn = thrice(display); warn(\u0026#34;ALERT\u0026#34;); // should display \u0026#34;ALERT\u0026#34; // three times in orange const bigwarn = fourtimes(display); bigwarn(\u0026#34;A L E R T\u0026#34;); // should display \u0026#34;A L E R T\u0026#34; // four times in orange // (the REPL will display // \u0026#34;A L E R T\u0026#34;a fifth time // [in white] as the value // returned by bigwarn) Actually, this already serves as a very big hint. First of all, we want to specify how the increment_repeater behaves. increment_repeater is a function that takes in a repeater and return another repeater, in another way =\u0026gt; increment_repeater : repeater -\u0026gt; repeater.\nNow, what is a repeater actually, it is a function that takes in f which is a function and x which is the argument with currying method, but overall it must be in the form of f =\u0026gt; x =\u0026gt; \u0026lt;do some useful work\u0026gt;.\nTherefore, we can firstly write\nconst increment_repeater = repeater =\u0026gt; (another repeater); ---- const increment_repeater = repeater =\u0026gt; f =\u0026gt; x =\u0026gt; \u0026lt;some useful work\u0026gt;; So given a repeater function that can repeat f N times, how do we repeat it one more time ? We can apply f 1 more time!, so to apply original repeater, we can do repeater(f)(x) and to add it one more time, we can do f(repeater(f)(x)) because f is a function!\nTherefore, the overall answer is\n// Answer :\rconst increment_repeater = repeater =\u0026gt; f =\u0026gt; x =\u0026gt; f(repeater(f)(x));\r2. Pair You are given a pair, which is defined using a function! Isn\u0026rsquo;t this amazing? Also, you are required to extract the head and the tail using another function and I think to be honest this is really amazing for me when I saw it for the first time, given a function can be used like this!\nFirstly, let\u0026rsquo;s understand what does pair do! pair is just a function that returns another function that accepts a new function which can be applied to the first 2 arguments being supplied or\n pair: (T, T) -\u0026gt; ( ((T, T) -\u0026gt; S) -\u0026gt; S)\n What this means is that, the returned result of pair would take in a function! We can use pair(1, 2)((x, y) =\u0026gt; x) to extract the head, but since we are given the syntax head(pair(1,2)), then we just need to assign a parameter to achieve the aforementioned effect, so\n// Answer const head = (theReturnedPair) =\u0026gt; theReturnedPair((x, y) =\u0026gt; x); Similarly for tail, you can try it out as an exercise!\n3. Omega Okay, you are given this function\nconst zero_repeater = (f) =\u0026gt; (x) =\u0026gt; x; const decrement_repeater = (repeater) =\u0026gt; head( repeater((p) =\u0026gt; pair(tail(p), increment_repeater(tail(p))))( pair(zero_repeater, zero_repeater) ) ); const twice = (f) =\u0026gt; (x) =\u0026gt; f(f(x)); const thrice = increment_repeater(twice); const also_twice = decrement_repeater(thrice); and no choice, you have to understand this function to give the time complexity lower bound\u0026hellip; You can try to trace the function for twice and see how it decrements to one repeater, or try once which is just const once = f =\u0026gt; x =\u0026gt; f(x);, but the idea here eventually is that you start from zero_repeater, and what each step does is that it will take the previous tail and set it as the head, and increment the previous tail as set it as the current tail, so\n// repeat twice\r0. 0, 0 // first\r1. 0, 1 // put tail of first -\u0026gt; head of new pair, increment tail of first -\u0026gt; tail of new pair\r2. 1, 2 // put tail of (1.) at head, increment tail of (1.) and put at tail\r// then extract the head which is 1 repeater now\rTherefore this program runs in Î©(n);\n4. Harder increment repeater and add repeaters The given codes here already serve as a very major hint\nconst zero_repeater = (f) =\u0026gt; (x) =\u0026gt; x; const one_repeater = (f) =\u0026gt; (x) =\u0026gt; f(zero_repeater, () =\u0026gt; zero_repeater(f)(x)); const two_repeater = (f) =\u0026gt; (x) =\u0026gt; f(one_repeater, () =\u0026gt; one_repeater(f)(x)); const three_repeater = (f) =\u0026gt; (x) =\u0026gt; f(two_repeater, () =\u0026gt; two_repeater(f)(x)); If you realize the pattern, const one_repeater = f =\u0026gt; x =\u0026gt; f(prev_repeater, () =\u0026gt; prev_repeater(f)(x)) and by following this pattern, you can finish increment_repeater pretty easily\n//Answer const increment_repeater = (prevRepeater) =\u0026gt; (f) =\u0026gt; (x) =\u0026gt; f(prevRepeater, () =\u0026gt; prevRepeater(f)(x)); And yeah, just be vigilant!\nThe second part, is harder because you can\u0026rsquo;t directly copy it, but the idea is you want to increment repeater1 by repeater2 times so you get repeater1 + repeater2 and thats why you need increment_repeater! From the previous part, you are given the way to use the repeater\n const to_int = repeater =\u0026gt; repeater((iter_count, x) =\u0026gt; x() + 1)(0);\n Therefore, you can try to copy how the repeater is applied, here to add 1, we apply x() and +1 so if we want to increment repeater, we also apply x() and then increment it because in this case if the initial value is given as a repeater, x() will give you a repeater too, which is the same as if the initial value is 0 (Number), x() will give you a number too! Hence you can add 1 to it! Therefore the answer is :\nconst add_repeaters = (repeater1, repeater2) =\u0026gt; repeater2((iter_count, x) =\u0026gt; increment_repeater(x()))(repeater1); And yeah, iter_count is useless here\u0026hellip;\n5. Decrement repeater Here we want to decrement the repeater, and given the pattern before\n const nextRepeater = f =\u0026gt; x =\u0026gt; f(prevRepeater, () =\u0026gt; prevRepeater(f)(x))\n One thing that we can do is to extract the head! Here is where iter_count can be useful! But the big question is that of course how to extract the head ?\nSimilar like head function, remember that f takes two arguments, and you can do whatever you want with those two arguments, hence you can write it as\nconst decrement_repeater = (repeater) =\u0026gt; repeater((iter_count, x) =\u0026gt; iter_count)(uselessStuff); This will work because (iter_count, x) =\u0026gt; iter_count acts like for the f, and uselessStuff here acts like the x which from the repeater, you can see we are just interested in the first argument and not the second so its useless until this point!\nHowever, for zero_repeater, this would return you an error because zero_repeater would just return x and if you don\u0026rsquo;t return a repeater, you will have your to_int broken!\nTherefore, for zero_repeater, you just pass zero_repeater as the x itself! MIND BLOWN!! So the final answer is\nconst decrement_repeater = (repeater) =\u0026gt; repeater((iter_count, x) =\u0026gt; iter_count)(zero_repeater); That\u0026rsquo;s all for this quest! pretty fun quest tbh!\n","permalink":"https://simonjulianl.github.io/post/cs1101sfunctionalquest/","summary":"Functional Expressionism This questions are available as a quest for CS1101S module at NUS. While I do not create or modify any of the questions, here are just some of my thoughts on the shortcut how to solve the questions!\n but this doesn\u0026rsquo;t offer full explanation how the functions work or how the substitution model can be utilized here\n Anyway, here are some tips when you are solving these questions :","title":"CS1101S Functional Expressionism Quest Shortcuts"},{"content":"Week 4 In week 4, we have learnt about higher order functions! Please be comfortable with this because you will be seeing this syntax for the rest of your CS1101S journey. Besides that, we also looked at the lexical scoping and did some exercises. Good luck for your upcoming Reading Assessment 1!\nSlides\nWeek 3 In week 3, we have learnt about Wishful Thinking. This is a very powerful thinking process and problem solving skill that would really help you along the way during your time in NUS and beyond. Not only that, we also touch the surface of order of growth and iterative vs recursive process. Remember that recursive / iteration process =/= recursion! You can also try the extra questions to reinforce your understanding!\nSlides\nWeek 2 In week 2, we have learnt about the fundamental of Source, including primitives, variables, function and conditionals. Not only that, we have learn the purpose of studying CS1101S, which is all about conveying your computational process. We will learn more about tools to convey your computational process in the future!\nSlides\nAdmin Slides\n","permalink":"https://simonjulianl.github.io/post/cs1101sslides/","summary":"Week 4 In week 4, we have learnt about higher order functions! Please be comfortable with this because you will be seeing this syntax for the rest of your CS1101S journey. Besides that, we also looked at the lexical scoping and did some exercises. Good luck for your upcoming Reading Assessment 1!\nSlides\nWeek 3 In week 3, we have learnt about Wishful Thinking. This is a very powerful thinking process and problem solving skill that would really help you along the way during your time in NUS and beyond.","title":"CS1101S Slides"},{"content":"Sea I participated in the Sea Labs summer internship program as an Android Engineer intern for the SeaTalk team in Singapore and mentored by one of the full-timer, Zhao Jingyi.\nIt\u0026rsquo;s my first time to work as a \u0026ldquo;real\u0026rdquo; software engineer (because I\u0026rsquo;m an intern, but the intern at Sea gets almost the same treatment as full-time employee including code review, code testing with QA, communicating the requirements with PM, etc)\nInitially, I was assigned with an entry task and working on two main projects, namely improving the qr code scanner by creating an Android view library using Google\u0026rsquo;s ML-Kit library and support media viewer for videos.\nI was also given the chance to maintain the technical documentation for the features using tools such as sequence diagram, state diagram, and UML diagram provided by PlantUML in the company\u0026rsquo;s confluence page.\nLastly, as part of continuous learning (yes it\u0026rsquo;s real peeps), I presented AppSearch library during SEA Android team sharing meeting!\nBioinformatics Institute, A*STAR My first time going to an internship, especially being involved with Research and also thanks to Phuc Cuong Ngo and Amadeus Aristo Winarto that also went to the internship and introduced me to this project.\nBeing more inclined towards physics (since I took H3 Modern Physics PC1144 before), I experimented with physics-guided neural networks to solve the Fokker-Planck equation.\nNot only that, I also help with the Hausdorff Dimension and FenceGAN (even though not much)\nPINUS Tech A web application by PINUS Tech team built using Next.js and Sequelize that provides a guide for Indonesian freshmen and a platform to showcase Indonesian studentsâ activities at NUS. I was the member of the team for 2020-2021 and am the team lead for 2021-2022 term.\nFor current release 1.0, please check pinusonline.org\nAlso, keep a look out for more features that are going to be released in the future !\nBoNUS Working with Amadeus Aristo Winarto to develop a mobile app prototype using Next.js, Firebase, Sequelize and many other technology stacks aiming to revamp the current NUS facilities booking system (Rebok) that has outdated UI/UX and is not mobile-friendly.\nThis project is done to fulfill CP2106 Independent Software Development, Orbital (Apollo) and that is an avenue for us to also learn various tech stacks including cypress, postman testing, AWS S3 Buckets, AWS RDS and CircleCI.\nTo play with our app, please visit BoNUS (by the way, please open it using your phone and please contact me to get the admin account) !\nRaffles Hall Developer Since I like software development and I need points to stay in Raffles Hall (even though finally I don\u0026rsquo;t have enough points LMAO but no regrets), I was part of Raffles Hall Developer.\nAs the lead back-end developer for the second semester, I supervise the team to create the server for Raffles Hall Application using Flask and MongoDB.\nNot only that, I was in charge of the laundry machine feature too and worked with Redux and React.js for the front-end (even though its eventually rolled back because its ineffective).\nTo use the app, please visit rhapp.lol!\nSource Academy Drone Developer My first time trying out drone development with Arya Nagatama Giat, this project aims to have a programmable drone in Source Language that is used in CS1101S at NUS.\nWe use CoDrone which comes with the CoDrone library that is written in C and ported it into Source language using Sinter, which is Source VM Language for microcontroller.\nUnfortunately, we were unable to integrate it with the Source Front-End web client yet. This is done for CP3108 module.\nFor the demo video, check this out!\n","permalink":"https://simonjulianl.github.io/post/old-internship-explanation/","summary":"Sea I participated in the Sea Labs summer internship program as an Android Engineer intern for the SeaTalk team in Singapore and mentored by one of the full-timer, Zhao Jingyi.\nIt\u0026rsquo;s my first time to work as a \u0026ldquo;real\u0026rdquo; software engineer (because I\u0026rsquo;m an intern, but the intern at Sea gets almost the same treatment as full-time employee including code review, code testing with QA, communicating the requirements with PM, etc)","title":"Past Experiences' Summaries"}]