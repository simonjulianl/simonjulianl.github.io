[{"content":"Recently, I took a module called CS2102 in NUS, titled \u0026ldquo;Introduction to Database\u0026rdquo;. Previously, when I heard of databases, the first thing that comes to my mind is about spamming SELECT * FROM SOMEWHERE statements. Maybe, it is because previously I have made some applications using MongoDB (for the Raffles Hall Application) and MySQL (for my Orbital, CP2106, Independent Software Development Project). I knew that databases are very complex, there is caching, indexing, sharding, etc.\nHowever, after I did a project to create a database application purely using PL/pgSQL language, I realized learning SQL Procedural Language is already very complex, but they are very interesting. This PL/pgSQL is a turing complete language, meaning you can do any computation with it. Some basic syntax, for example:\n Declaring a new function and variables, yup just like in any procedural languages, you can create a procedure in PL/pgSQL  CREATE OR REPLACE FUNCTION sql_function(parameter INT) RETURNS BOOLEAN AS $$ DECLARE answer INT := 0; BEGIN RETURN QUERY SELECT TRUE ...; END; $$ LANGUAGE plpgsql; Not only that, you can even do recursive calls in PL/pgSQL !! I found this very amazing. But ok, admittedly they are very slow and I haven\u0026rsquo;t learnt much about optimization and how expensive joins operations are. e.g. This is a function that I implemented to find list of African countries that I can reach by crossing land borders recursively from Malaysia!!  WITH RECURSIVE border_traverse AS ( SELECT DISTINCT b.country1_iso2, b.country2_iso2, 1 AS crossing_count FROM borders b WHERE country1_iso2 = \u0026#39;MY\u0026#39; UNION ALL SELECT DISTINCT b.country1_iso2, b.country2_iso2, crossing_count + 1 FROM border_traverse bt, borders b WHERE bt.country2_iso2 = b.country1_iso2 AND bt.crossing_count \u0026lt; 10 ) SELECT DISTINCT co.name AS country_name, MIN(bt.crossing_count) AS crossing_count FROM border_traverse bt, countries co WHERE bt.country2_iso2 = co.iso2 AND co.continent = \u0026#39;Africa\u0026#39; GROUP BY co.name ORDER BY crossing_count ; There are more interesting features from PL/pgSQL but those two are the highlights of PL/pgSQL that I want to emphasize and I want to remember should I saw this post again. In summary, I find coding using a mix of declarative and procedural languages to be interesting!\nNot only that, I never thought of the mathematical framework to really analyze database. When you design a table, from what I learn from H2 Computing about normal forms, they are just merely descriptions, they are not really formal mathematical statements. Learning about Functional Dependency (FD) really teaches me a lot of things. There are a lot of formal specifications about database, and I found the tool created by one of my CS2102 prof, Adiyoga, to be very cool. It is about Simple FD tools to find closure, proving, etc. I really appreciate him for making this tool as this is a very useful tool to aid my learning during CS2102!\n        The UI on the \u0026ldquo;Simple\u0026rdquo; FD tool!    So here to my first reflection about CS2102, and in general I am really grateful that I have taken this with my friends. I did enjoy my time here and I really learnt a lot also!\nHave a nice day everyone!\n","permalink":"https://simonjulianl.github.io/post/introtopsql/","summary":"Recently, I took a module called CS2102 in NUS, titled \u0026ldquo;Introduction to Database\u0026rdquo;. Previously, when I heard of databases, the first thing that comes to my mind is about spamming SELECT * FROM SOMEWHERE statements. Maybe, it is because previously I have made some applications using MongoDB (for the Raffles Hall Application) and MySQL (for my Orbital, CP2106, Independent Software Development Project). I knew that databases are very complex, there is caching, indexing, sharding, etc.","title":"Intro to Database and How It Changes My View on Database"},{"content":"Hi guys, as mastery check 2, practical examination and final are coming soon, please use this list of questions to check your understanding. Reflect on what you understand (and how deep do you understand the topic is) and what you don\u0026rsquo;t understand!\nAnyway, there are 3 categories for the questions: fundamental, intermediate and advanced.\n Fundamental are topics and questions that you must be able to answer. Intermediate are questions that you must be able to answer if you want to obtain at least A grade. Advanced are really just questions to probe your understanding and would give the A+ grade  As you know by know, Reading assessments are really very difficult if you never master the concepts correctly. If you want to score well in your final, you should revise and know what things that you don\u0026rsquo;t understand at this point. Now, its the right time to revise for final exam. Please do read these questions carefully and try to answer them as many as you can!\nYou can download it here as a word document instead, and it\u0026rsquo;s formatted as a table already!\n Fundamental Environment Model  What is the main idea of environment model ? What is an environment and bindings ? What are the cases where we need to extend an environment ? And what is the correct way to extend it ? How do we find the value of a variable using the environment model ?  Memoization  What is memoization and why do we need memoization ? What are the conditions or types of problems that we can solve with memoization ? How do we implement memoization in general, and how do we memoize functions such as stream ?  Stream   What is the definition of stream ? Is this a stream ?\nConst maybe_stream = pair(1, (x) =\u0026gt; pair(x, null));\n  What is the difference between stream and list, and in what aspects are they similar too ?\n   Intermediate Environment Model  Why do we need environment model when we have substitution model ? Give an example where the substitution model fails! Excluding empty frames and global environment, how many environments are created within the execution of the following programme ? Can you draw it ?   Memoization  Consider given an image made of 1 and 0, given in the following function And we want to find the number of ones in a certain row of the image and the function getOnes would be called multiple times, how will you solve this problem with and without memoization ? Given the memoize function in your lecture, why the following code would still give exponential runtime ?   Stream  What is the result of the evaluation of the following code ?  Given two infinite stream, how would you interleave them together, and can you generalize the method to given a list of infinite stream ?   Advanced Environment Model  Excluding empty frames and global environment, how many environments are created within the execution of the following programme (adapted from the lecture) ? Can you draw it ?   Memoization  Explain how memoization works on Stream and functions as given in the lecture! You can refer to Environment model advanced question to solve this question too! What are the difference in memoizing results from bottom-up and top-down approach in solving problems (Most notably in dynamic programming) ? How will you memoize the results in these two cases ?  Stream  How would you then memoize the stream in Stream Intermediate Question 1, is the following piece of code the correct way to memoize it ?   I might add more questions if I can think of more, but for now, please do your revision and good luck!\n","permalink":"https://simonjulianl.github.io/post/cs1101smasterycheck2/","summary":"Hi guys, as mastery check 2, practical examination and final are coming soon, please use this list of questions to check your understanding. Reflect on what you understand (and how deep do you understand the topic is) and what you don\u0026rsquo;t understand!\nAnyway, there are 3 categories for the questions: fundamental, intermediate and advanced.\n Fundamental are topics and questions that you must be able to answer. Intermediate are questions that you must be able to answer if you want to obtain at least A grade.","title":"CS1101S Mastery Check 2 (Env Model, Memoization, and Streams) Questions"},{"content":"Chapter 1: Simultaneous Equations, Polynomials and Partial Fractions Simultaneous Equations This is the fundamental topic in Additional Mathematics. In real life, we are using algebras to model a lot of real life objects and constraints. But in reality, it\u0026rsquo;s hardly ever that only 1 variable is involved. There are many constraints and variables involved within a process and hence we need a set of equations to govern them. Therefore, we need to understand how to solve them and hence simultaneous equations is the right topic to open your journey into A-Math world!\nSlides\nMore Simultaneous Equations and Factorization! This is the extension from the simultaneous equation topic. Here, you will learn how to use substitution method to solve linear equations involving 3 variables. Not only that, we will try to revise on how to factorize the more general form of quadratic equation, which is ax^2 + bx + c!\nSlides\nPolynomial After we are learning about factorization and the basic to solve multiple simultaneous equations, we are ready to extend this concept to an expression of a sum of terms made up of ax^n form where a is the coefficient and n must be a non-negative integer (\u0026gt;= 0). Lastly, we are also trying to extend the idea of division using the very old-fashioned method that you usually did in your primary school days. However, the division that we will be doing would involve algebra which makes it much more difficult!\nSlides\nRemainder and Factor Theorem for Polynomials Polynomial is a very diverse field, and hence naturally there would be a lot of theorems revolving around them. Two of such theorems that you would learn in A-Math in Remainder and Factor theorem which can be derived using the properties of long division!\nSlides\nCubic Equations In this set of slides, we will be learning about cubic equations more in-depth, especially how to factorize and solve general cubic equations using trial and error method with the aid of scientific calculator.\nSlides\nPartial Fraction The last part of the polynomial chapter would introduce you with partial fraction. This is one of the most tedious sections in A-math in my opinion but it is very useful, especially when you will be learning about integration and differentiation in the later chapters! So do put extra effort to learn this section!\nSlides\nChapter 2: Quadratic Equations, Inequalities and Modulus Functions Quadratic Equation In this section, we will be dissecting quadratic equations in-depth, especially about it\u0026rsquo;s roots properties such as sum of root, product of roots, and determinants. This would require you to have good algebra manipulation skill! Practise a lot and you will be rewarded!\nSlides\n","permalink":"https://simonjulianl.github.io/post/amathtuition/","summary":"Chapter 1: Simultaneous Equations, Polynomials and Partial Fractions Simultaneous Equations This is the fundamental topic in Additional Mathematics. In real life, we are using algebras to model a lot of real life objects and constraints. But in reality, it\u0026rsquo;s hardly ever that only 1 variable is involved. There are many constraints and variables involved within a process and hence we need a set of equations to govern them. Therefore, we need to understand how to solve them and hence simultaneous equations is the right topic to open your journey into A-Math world!","title":"Singapore GCE O-Level A-Math Resources"},{"content":"Hi guys, as mastery check and midterm is coming soon, please use this list of questions to check your understanding. Reflect on what you understand (and how deep do you understand the topic is) and what you don\u0026rsquo;t understand!\nAnyway, there are 3 categories for the questions: fundamental, intermediate and advanced.\n Fundamental are topics and questions that you must be able to answer. Intermediate are questions that you must be able to answer if you want to obtain at least A grade. Advanced are really just questions to probe your understanding and would give the A+ grade  Reading assessment is really very difficult. The midterm and final exam won\u0026rsquo;t be that difficult that\u0026rsquo;s why some of the RA questions appears in the Intermediate and Advanced categories, not in fundamental. Fundamental is really just understanding the concepts at the very basic level.\nYou can download it here as a word document instead, and it\u0026rsquo;s formatted as a table already!\n Fundamental Scope  What are the different types of declarations in Source? What are the differences between name declarations and name occurrences, function declarations with function applications? In sub model, how do you replace the name occurrences (aka how do you determine what each occurrence refers to)  Higher Order Functions  How do you differentiate which function are higher-order functions? How can you transform a function declaration into a constant declaration? And is it possible for all functions to be declared as constant declaration? What are the differences between these two expressions, g(f) and g(f(2))?  Substitution Model \u0026amp; Processes  Explain the differences between iterative and recursive processes! What are their implications programmes such as space and time complexity, code length, code quality, etc Explain the differences between applicative and normal order reductions then explains what the implications on the evaluation of the programme are! Consider this, Does this perform any addition ?   Intermediate Scope  Match these naming occurrences (From RA 21)  What are the differences between function declaration and const declaration? Hint: nested function (maybe there are others too)  Which scope does math_e, constant belong to? And is it possible to redefine math_e in Source Language by using some of the languages construct (such as {}, const, recursion, etc)? If it is, how?  Higher Order Functions  How do you do recursion, using only lambda construct without any function declaration? To demonstrate your understanding, try to write a factorial function using const declaration only!  Substitution Model \u0026amp; Processes  Can switching the order of operands reduce the number of deferred operations? (Source evaluates from left to right for operations that have equal precedence) If a program gives rise to a recursive process, can you transform it into a program that gives rise to an iterative process by switching the operands of additions / subtractions / multiplications?   Advanced Scope   In your substitution model, you always replace the function application with the function body (or the code within {}). If you think about it further, very rarely if not none there is any programming language that uses sub model as the mental evaluation model, why? Are there any gaps in sub model? Or can you justify that the model is perfect\n  Does this work? State your reasoning! What if I moved the fun(x + y) above const z = 10; Will this work?\n  Modified from RA 21, will this work? What kind of error would it give if it doesn’t work or prove me that it works!\n  Higher Order Functions   Consider this lambda function What is the result of the evaluation of this programme?\n  HOF can be used to implement data structures such as pair, consider\nconst p = (x, y) =\u0026gt; (flag) =\u0026gt; flag \u0026lt; 1 ? x : y; This is a very simple implementation of pair purely using flag (and not using other constructs). With this implementation of pair, how then will you implement the head, tail and a list using this pair (aka list (…))\n  Substitution Model \u0026amp; Processes  Does this give programme give rise to a recursive or iterative process?  Taken from RA 21, Does this process give rise to iterative or recursive process? And if it’s a recursive process, what are the deferred operations here?  I might add more questions if I can think of more, but for now, please do your revision and good luck!\n","permalink":"https://simonjulianl.github.io/post/cs1101smasterycheck1/","summary":"Hi guys, as mastery check and midterm is coming soon, please use this list of questions to check your understanding. Reflect on what you understand (and how deep do you understand the topic is) and what you don\u0026rsquo;t understand!\nAnyway, there are 3 categories for the questions: fundamental, intermediate and advanced.\n Fundamental are topics and questions that you must be able to answer. Intermediate are questions that you must be able to answer if you want to obtain at least A grade.","title":"CS1101S Mastery Check 1 (HOF, Scope, and Processes) Questions"},{"content":"Functional Expressionism This questions are available as a quest for CS1101S module at NUS. While I do not create or modify any of the questions, here are just some of my thoughts on the shortcut how to solve the questions!\n but this doesn\u0026rsquo;t offer full explanation how the functions work or how the substitution model can be utilized here\n Anyway, here are some tips when you are solving these questions :\n Be vigilant, there are tons of hints being thrown at you and actually you can use them Try to understand the big idea, sometimes trying to subbing in the function one by one especially for the complex functions just leads you to one hell of a mess You can brute force, it\u0026rsquo;s fine and maybe you can try to work backward to understand why your brute force solutions work / doesn\u0026rsquo;t work  So, here are my insights on these questions!\n1. Increment Repeater You are given these functions and you are required to implement the increment_repeater,\nconst twice = (f) =\u0026gt; (x) =\u0026gt; f(f(x)); const thrice = increment_repeater(twice); const fourtimes = increment_repeater(thrice); const warn = thrice(display); warn(\u0026#34;ALERT\u0026#34;); // should display \u0026#34;ALERT\u0026#34; // three times in orange const bigwarn = fourtimes(display); bigwarn(\u0026#34;A L E R T\u0026#34;); // should display \u0026#34;A L E R T\u0026#34; // four times in orange // (the REPL will display // \u0026#34;A L E R T\u0026#34;a fifth time // [in white] as the value // returned by bigwarn) Actually, this already serves as a very big hint. First of all, we want to specify how the increment_repeater behaves. increment_repeater is a function that takes in a repeater and return another repeater, in another way =\u0026gt; increment_repeater : repeater -\u0026gt; repeater.\nNow, what is a repeater actually, it is a function that takes in f which is a function and x which is the argument with currying method, but overall it must be in the form of f =\u0026gt; x =\u0026gt; \u0026lt;do some useful work\u0026gt;.\nTherefore, we can firstly write\nconst increment_repeater = repeater =\u0026gt; (another repeater); ---- const increment_repeater = repeater =\u0026gt; f =\u0026gt; x =\u0026gt; \u0026lt;some useful work\u0026gt;; So given a repeater function that can repeat f N times, how do we repeat it one more time ? We can apply f 1 more time!, so to apply original repeater, we can do repeater(f)(x) and to add it one more time, we can do f(repeater(f)(x)) because f is a function!\nTherefore, the overall answer is\n// Answer :\rconst increment_repeater = repeater =\u0026gt; f =\u0026gt; x =\u0026gt; f(repeater(f)(x));\r2. Pair You are given a pair, which is defined using a function! Isn\u0026rsquo;t this amazing? Also, you are required to extract the head and the tail using another function and I think to be honest this is really amazing for me when I saw it for the first time, given a function can be used like this!\nFirstly, let\u0026rsquo;s understand what does pair do! pair is just a function that returns another function that accepts a new function which can be applied to the first 2 arguments being supplied or\n pair: (T, T) -\u0026gt; ( ((T, T) -\u0026gt; S) -\u0026gt; S)\n What this means is that, the returned result of pair would take in a function! We can use pair(1, 2)((x, y) =\u0026gt; x) to extract the head, but since we are given the syntax head(pair(1,2)), then we just need to assign a parameter to achieve the aforementioned effect, so\n// Answer const head = (theReturnedPair) =\u0026gt; theReturnedPair((x, y) =\u0026gt; x); Similarly for tail, you can try it out as an exercise!\n3. Omega Okay, you are given this function\nconst zero_repeater = (f) =\u0026gt; (x) =\u0026gt; x; const decrement_repeater = (repeater) =\u0026gt; head( repeater((p) =\u0026gt; pair(tail(p), increment_repeater(tail(p))))( pair(zero_repeater, zero_repeater) ) ); const twice = (f) =\u0026gt; (x) =\u0026gt; f(f(x)); const thrice = increment_repeater(twice); const also_twice = decrement_repeater(thrice); and no choice, you have to understand this function to give the time complexity lower bound\u0026hellip; You can try to trace the function for twice and see how it decrements to one repeater, or try once which is just const once = f =\u0026gt; x =\u0026gt; f(x);, but the idea here eventually is that you start from zero_repeater, and what each step does is that it will take the previous tail and set it as the head, and increment the previous tail as set it as the current tail, so\n// repeat twice\r0. 0, 0 // first\r1. 0, 1 // put tail of first -\u0026gt; head of new pair, increment tail of first -\u0026gt; tail of new pair\r2. 1, 2 // put tail of (1.) at head, increment tail of (1.) and put at tail\r// then extract the head which is 1 repeater now\rTherefore this program runs in Ω(n);\n4. Harder increment repeater and add repeaters The given codes here already serve as a very major hint\nconst zero_repeater = (f) =\u0026gt; (x) =\u0026gt; x; const one_repeater = (f) =\u0026gt; (x) =\u0026gt; f(zero_repeater, () =\u0026gt; zero_repeater(f)(x)); const two_repeater = (f) =\u0026gt; (x) =\u0026gt; f(one_repeater, () =\u0026gt; one_repeater(f)(x)); const three_repeater = (f) =\u0026gt; (x) =\u0026gt; f(two_repeater, () =\u0026gt; two_repeater(f)(x)); If you realize the pattern, const one_repeater = f =\u0026gt; x =\u0026gt; f(prev_repeater, () =\u0026gt; prev_repeater(f)(x)) and by following this pattern, you can finish increment_repeater pretty easily\n//Answer const increment_repeater = (prevRepeater) =\u0026gt; (f) =\u0026gt; (x) =\u0026gt; f(prevRepeater, () =\u0026gt; prevRepeater(f)(x)); And yeah, just be vigilant!\nThe second part, is harder because you can\u0026rsquo;t directly copy it, but the idea is you want to increment repeater1 by repeater2 times so you get repeater1 + repeater2 and thats why you need increment_repeater! From the previous part, you are given the way to use the repeater\n const to_int = repeater =\u0026gt; repeater((iter_count, x) =\u0026gt; x() + 1)(0);\n Therefore, you can try to copy how the repeater is applied, here to add 1, we apply x() and +1 so if we want to increment repeater, we also apply x() and then increment it because in this case if the initial value is given as a repeater, x() will give you a repeater too, which is the same as if the initial value is 0 (Number), x() will give you a number too! Hence you can add 1 to it! Therefore the answer is :\nconst add_repeaters = (repeater1, repeater2) =\u0026gt; repeater2((iter_count, x) =\u0026gt; increment_repeater(x()))(repeater1); And yeah, iter_count is useless here\u0026hellip;\n5. Decrement repeater Here we want to decrement the repeater, and given the pattern before\n const nextRepeater = f =\u0026gt; x =\u0026gt; f(prevRepeater, () =\u0026gt; prevRepeater(f)(x))\n One thing that we can do is to extract the head! Here is where iter_count can be useful! But the big question is that of course how to extract the head ?\nSimilar like head function, remember that f takes two arguments, and you can do whatever you want with those two arguments, hence you can write it as\nconst decrement_repeater = (repeater) =\u0026gt; repeater((iter_count, x) =\u0026gt; iter_count)(uselessStuff); This will work because (iter_count, x) =\u0026gt; iter_count acts like for the f, and uselessStuff here acts like the x which from the repeater, you can see we are just interested in the first argument and not the second so its useless until this point!\nHowever, for zero_repeater, this would return you an error because zero_repeater would just return x and if you don\u0026rsquo;t return a repeater, you will have your to_int broken!\nTherefore, for zero_repeater, you just pass zero_repeater as the x itself! MIND BLOWN!! So the final answer is\nconst decrement_repeater = (repeater) =\u0026gt; repeater((iter_count, x) =\u0026gt; iter_count)(zero_repeater); That\u0026rsquo;s all for this quest! pretty fun quest tbh!\n","permalink":"https://simonjulianl.github.io/post/cs1101sfunctionalquest/","summary":"Functional Expressionism This questions are available as a quest for CS1101S module at NUS. While I do not create or modify any of the questions, here are just some of my thoughts on the shortcut how to solve the questions!\n but this doesn\u0026rsquo;t offer full explanation how the functions work or how the substitution model can be utilized here\n Anyway, here are some tips when you are solving these questions :","title":"CS1101S Functional Expressionism Quest Shortcuts"},{"content":"Week 2 In week 2, we have learnt about the fundamental of Source, including primitives, variables, function and conditionals. Not only that, we have learn the purpose of studying CS1101S, which is all about conveying your computational process. We will learn more about tools to convey your computational process in the future!\nSlides\nAdmin Slides\nWeek 3 : Substitution Model and Wishful Thinking In week 3, we have learnt about Wishful Thinking. This is a very powerful thinking process and problem solving skill that would really help you along the way during your time in NUS and beyond. Not only that, we also touch the surface of order of growth and iterative vs recursive process. Remember that recursive / iteration process =/= recursion! You can also try the extra questions to reinforce your understanding!\nSlides\nWeek 4 : Higher Order Function In week 4, we have learnt about higher order functions! Please be comfortable with this because you will be seeing this syntax for the rest of your CS1101S journey. Besides that, we also looked at the lexical scoping and did some exercises. Good luck for your upcoming Reading Assessment 1!\nSlides\nWeek 5 : Data Abstraction Fundamental (Pair and List) In week 5, we are learning about data abstraction, and mainly about Pair and List in Source, they are the essential data abstraction in Source. Not only that, there are some extra questions at the end of the slides, please feel free to try it to check your understanding!\nSlides\nWeek 6 : Data Structure Extension (Tree) and Continuation Passing Style In week 6, we are learning about continuation passing style or CPS, this is a pretty complex topic and yet its very powerful as it is able to convert recursive process into an iterative process. Not only that, list can be extended tree where a tree is a null or a list containing a value or another tree. Beware of this recursive definition as you will se this over and over again!\nSlides\nWeek 7 : Order of Growth, and Revision In week 7, this is a revision week. This week, we cover about OOG, iterative process and how to draw box-and-pointer diagram for map and accumulate. Not only that, we also go through some questions from past year mid term papers. Also, good luck for your midterm!\nSlides\nWeek 8 : Robot! In week 8, this will be a very fun week because you will be playing with your robot. Not only that, we are moving into Source v3 where we are allowed to use mutable data using let keyword. However, note that having mutable data does not mean that we can understand our programme easily, in fact it\u0026rsquo;s much harder now because a function can have unexpected side-effects!\nSlides\nWeek 9 : Environment Model In week 9, you will be learning environment model. This model supersedes substitution model. It\u0026rsquo;s much rigorous, much more comprehensive and suitable for both pure functional programming and also stateful programming. The lecture is already very detailed but there are some points and highlights here that you might not want to miss out!\nSlides\nWeek 10 : Array and Memoization In week 10, things are getting more and more difficult with the introduction of stream especially. Not only that, we will be learning about searching and sorting using an array instead of a list. Lastly, we will be also learning about memoization. Even though this term might feel daunting, actually the gist of it is just to store the computed value such that you don\u0026rsquo;t need to do redundant computations! Also, good luck for your upcoming RA2!\nSlides\nWeek 11 : Stream In week 11, we are learning about streams. Streams are very tricky, especially because of its power to generate infinite sequence! Meaning you can multiply two infinite sequences, interleave them, and do some cool tricks such as generating fibonacci, etc. Not only that, this also means that memoization with stream is not that easy, but you can always use the environment model to help you understand it!\nSlides\nWeek 12 : Meta-circular Evaluator In week 12, we are learning about Meta-circular evaluator. This is really the crux of Source because implementing this would require you to really understand the environment model and how Source evaluates its programme. MCE may look daunting, but there are some tips and tricks that I share in the following slide on how to master MCE!\nSlides\nWeek 13 : Summary Congratulations!! It has been a long and arduous journey to reach the end of CS1101S journey. I hope that taking CS1101S is a memorable and meaningful experience for you guys! Good luck for your PA and Final and see you again should our paths cross again!\nSlides\n","permalink":"https://simonjulianl.github.io/post/cs1101sslides/","summary":"Week 2 In week 2, we have learnt about the fundamental of Source, including primitives, variables, function and conditionals. Not only that, we have learn the purpose of studying CS1101S, which is all about conveying your computational process. We will learn more about tools to convey your computational process in the future!\nSlides\nAdmin Slides\nWeek 3 : Substitution Model and Wishful Thinking In week 3, we have learnt about Wishful Thinking.","title":"CS1101S Slides"},{"content":"Sea I participated in the Sea Labs summer internship program as an Android Engineer intern for the SeaTalk team in Singapore and mentored by one of the full-timer, Zhao Jingyi.\nIt\u0026rsquo;s my first time to work as a \u0026ldquo;real\u0026rdquo; software engineer (because I\u0026rsquo;m an intern, but the intern at Sea gets almost the same treatment as full-time employee including code review, code testing with QA, communicating the requirements with PM, etc)\nInitially, I was assigned with an entry task and working on two main projects, namely improving the qr code scanner by creating an Android view library using Google\u0026rsquo;s ML-Kit library and support media viewer for videos.\nI was also given the chance to maintain the technical documentation for the features using tools such as sequence diagram, state diagram, and UML diagram provided by PlantUML in the company\u0026rsquo;s confluence page.\nLastly, as part of continuous learning (yes it\u0026rsquo;s real peeps), I presented AppSearch library during SEA Android team sharing meeting!\nBioinformatics Institute, A*STAR My first time going to an internship, especially being involved with Research and also thanks to Phuc Cuong Ngo and Amadeus Aristo Winarto that also went to the internship and introduced me to this project.\nBeing more inclined towards physics (since I took H3 Modern Physics PC1144 before), I experimented with physics-guided neural networks to solve the Fokker-Planck equation.\nNot only that, I also help with the Hausdorff Dimension and FenceGAN (even though not much)\nPINUS Tech A web application by PINUS Tech team built using Next.js and Sequelize that provides a guide for Indonesian freshmen and a platform to showcase Indonesian students’ activities at NUS. I was the member of the team for 2020-2021 and am the team lead for 2021-2022 term.\nFor current release 1.0, please check pinusonline.org\nAlso, keep a look out for more features that are going to be released in the future !\nBoNUS Working with Amadeus Aristo Winarto to develop a mobile app prototype using Next.js, Firebase, Sequelize and many other technology stacks aiming to revamp the current NUS facilities booking system (Rebok) that has outdated UI/UX and is not mobile-friendly.\nThis project is done to fulfill CP2106 Independent Software Development, Orbital (Apollo) and that is an avenue for us to also learn various tech stacks including cypress, postman testing, AWS S3 Buckets, AWS RDS and CircleCI.\nTo play with our app, please visit BoNUS (by the way, please open it using your phone and please contact me to get the admin account) !\nRaffles Hall Developer Since I like software development and I need points to stay in Raffles Hall (even though finally I don\u0026rsquo;t have enough points LMAO but no regrets), I was part of Raffles Hall Developer.\nAs the lead back-end developer for the second semester, I supervise the team to create the server for Raffles Hall Application using Flask and MongoDB.\nNot only that, I was in charge of the laundry machine feature too and worked with Redux and React.js for the front-end (even though its eventually rolled back because its ineffective).\nTo use the app, please visit rhapp.lol!\nSource Academy Drone Developer My first time trying out drone development with Arya Nagatama Giat, this project aims to have a programmable drone in Source Language that is used in CS1101S at NUS.\nWe use CoDrone which comes with the CoDrone library that is written in C and ported it into Source language using Sinter, which is Source VM Language for microcontroller.\nUnfortunately, we were unable to integrate it with the Source Front-End web client yet. This is done for CP3108 module.\nFor the demo video, check this out!\n","permalink":"https://simonjulianl.github.io/post/old-internship-explanation/","summary":"Sea I participated in the Sea Labs summer internship program as an Android Engineer intern for the SeaTalk team in Singapore and mentored by one of the full-timer, Zhao Jingyi.\nIt\u0026rsquo;s my first time to work as a \u0026ldquo;real\u0026rdquo; software engineer (because I\u0026rsquo;m an intern, but the intern at Sea gets almost the same treatment as full-time employee including code review, code testing with QA, communicating the requirements with PM, etc)","title":"Past Experiences' Summaries"},{"content":"Finally, it is the end of the hectic first semester of my second year in NUS. I thought it would be nice to take a moment to reflect what I had done this semester and how I can improve myself based on these experiences.\nGeneral Comments This semester is a very hectic one and I do not have the time (OR maybe I do not want to find the time) to exercise. As the result, I gain some weights and I should start exercising again. This semester has been a very fun and tiring one, but I would expect for future semesters to be at least this hectic.\nAcademic Life It was within my expectation that this semester would be a hectic one. Reading the module reviews and getting some feedback from the CS seniors, seems that combination of CS2102 and CS2103T that have group projects would impose a very heavy workload on me. Initially, I was thinking to take 24 MC excluding GEQ. However, I was assigned GEQ during the first module registration phase, and I could not drop it as the office mentioned that the module would be discontinued and future batches would have new syllabus that is equivalent to GEQ. Therefore, I took 28 MC this semester, including 1 language module: Chinese 3, LAC3201. I am always interested in learning chinese, it is just that unfortunately I know that the bell curve for language modules are often unforgiving and I need to prepare my SU for every language module that I want to take. Therefore, I really try my best to conserve my SU this semester so that I have enough SU for Chinese 4, 5, and 6.\nSo during this semester, CS2103T, software engineering, was the module with heaviest workload. I needed to make a CLI chatbot called Duke as an individual project, followed by modification of AddressBook3 as part of the team project. To be honest, I really wish that I had taken this module before I went to my first internship. Should I had taken this module before, I wouldn\u0026rsquo;t act so \u0026ldquo;blur\u0026rdquo;. I remembered asking my supervisor of what is GitLab, how to rebase commits, what is sprint meeting, and other software engineering patterns. Not only that, I really enjoyed my time learning about the software engineering patterns here such as facade, observer, and MVC patterns. However, unfortunately, I believe content-wise most of the materials can be self-taught.\nTeam-wise, I learnt a lot about managing a team with varying appetite and capabilities. I tried to step up and became the team lead of my CS2103T team, leading the sprint and setting the deadlines every week. I realize that managing a team is very difficult. Especially, when some members are just unable to finish their tasks and become bottleneck. I believe other members can take over. However, it would really hurt the grade of the member who cannot finish their tasks because ultimately it is almost they are doing very little stuffs. Not only that, being strict about deadlines is very difficult. I tried my best but I do not have any mechanism of what I should do if the other members do not want to do it. I cannot fire them, scolding them just sour our relationships, and I cannot fine them. Not only that, I feel there is a need to respect their responsibilities. People tend to be more serious when they have some features that they are fully responsible for. But in school projects, I find it really difficult to incentivize people to do work if they themselves really no incentives because different people have different priorities, and they might not prioritize CS2103T.\nIn the future, I would try to improve my leadership skill by being more stricter about deadlines and really provide them incentives to do well as a group. I was thinking of maybe setting clearer goals and assigning features early and let the members be fully responsible about it. Not only that, I should have asked for their commitments in the beginning and plan the workload for each member accordingly.\nOn the other hand, CS2102, introduction to database, also has project work. While I do not think it is as tedious as CS2103T project, I feel grateful that I have been really blessed by wonderful team. I was working with my indonesian seniors and friends, and they really know their stuffs. There was no bottlenecks, and we can quickly solve the project within 1-2 weeks without any need to do hackathon. Unfortunately, one minor hiccup happened during the project presentation. I accidentally added SELECT 1 into a function and the Postgres threw an error that we never see before. I was really ashamed because it happened when I tried to add more test cases for the project presentation, but I accidentally pressed ctrl + v and I never realized it. From this experience, I learnt that I should have checked that at least everything works before I push the commit into the master branch instead of eye-balling it.\nSome other notable lessons that I had this semester is from CS2101, effective communication for computing professionals. The NEEDS analysis that requires me to know about the context, audience, and the purpose has been the most memorable lesson as I still used it until today. Not only that, for the first time in my life, I really learnt to read developer and user guides of a product, IIRC, I got GIMP. Previously, when I need to know about the products, I just search online tutorials or just play around with the products. Not only that, I know that I was a very curt and straightforward person. Whenever I gave feedback to other people, especially during code review, I just pointed out what went right and wrong, and sometimes there were hurtful comments. In this module, I learnt how to give feedback more tactfully, and I am really grateful that I learnt those methods.\nLastly, learning Chinese 3 is fun and 陈老师 is a very funny person. I really enjoyed the lesson and I wish I can continue in Y2S2. However, due to ATAP, I cannot continue and might continue again in Y3S1. I tried my best to learn because I know that unlike technical skill, language skill cannot be cramped overnight and you need to practise continuously to be able to master them. I watched some online Chinese videos, 特别天天中文。I am planning to continue learning Chinese in the future!!\nFinding Internship I realized that I felt a little bit too arrogant when I tried to search for internships this semester. I thought because I had interned at SEA labs before, I would have a pretty easy time finding another one. However, the reality did not reflect that well. I created an excel sheet to track my internship and as of 5 November 2021, I had applied to 49 different companies. Some are in the US (Which I believe given the current COVID pandemic situation, they are very unlikely to be able to sponsor my Visa, but no harm trying). Out of 49 companies, only 4 companies decided to interview me and only 1 offered me the internship. Not only that, I was really sad that I got rejected by Google STEP programme which I thought I have done pretty well in the OA. I just thought that maybe local big companies such as Facebook and Google are not really hiring foreigners unless you are the cream of the crop.\nTo prepare finding internship this semester, I have finished the entire Cracking The Coding Interview (CTCI) book using Kotlin. Yes, Kotlin, because I was pretty fascinated by the language and I used it extensively when I was an Android Developer at SEA labs. I did all my coding interviews in Kotlin and Java because I have forgotten how to use Python and C++. I hope in the future, I would prepare my resume better and really try to tailor them based on what the companies need instead of sending one very general resume to every company that I did this semester. Maybe that was one of the reasons why the companies never call me for interviews, maybe my resume just did not pass the AI filter. But again, who knows.\nNon-Academic Life This semester, I was really grateful that I joined NUS Hackers. It was really interesting and I had planned to join them since Y1. Unfortunately, because Raffles Hall CCAs was busy enough especially because of Squash and RH Dev, I decided not to join them in Y1. Not only that, until now, I am still impressed the immense amount of technical skills that the people in NUS Hackers have. It is really interesting and I really enjoy coming to Friday Hacks especially.\nI was also the head of PINUS Tech, and this is another problem that is very similar to CS2103T. I realize taking a lot of Y2 CS students would mean people would rarely work because they would focus their attentions on CS2103T. As the result, only a handful of people really some efforts in PINUS Tech and we need to more stuffs during the winter. Hopefully, we can finish the internal blog and connecting the main blog to CMS to allow non-tech-savvy people to be able to change the contents including logos and pictures of the website without any need to ask us continuously.\nThat\u0026rsquo;s all for this semester, thank you everyone who has read this and maybe one of those would be my future me. I am really grateful that I have learnt a lot this semester and met a lot of new people this semester that has made my life not boring.\n","permalink":"https://simonjulianl.github.io/post/yeartwosemonereflection/","summary":"Finally, it is the end of the hectic first semester of my second year in NUS. I thought it would be nice to take a moment to reflect what I had done this semester and how I can improve myself based on these experiences.\nGeneral Comments This semester is a very hectic one and I do not have the time (OR maybe I do not want to find the time) to exercise.","title":"My Y2S1 Reflection"}]